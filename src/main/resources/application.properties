spring.application.name=pedidos-service

# Application Info
application.name=@project.name@
application.description=@project.description@
build.version=@project.version@
build.timestamp=@timestamp@
build.timezone=@timezone@

# Errors
server.error.include-stacktrace=never
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.com.postech.gerencie.pedidos=TRACE

# Database
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Liquibase
spring.liquibase.enabled=true
spring.liquibase.change-log=${GERENCIE_LIQUIBASE_CHANGELOGS_PATH:db/changelog/changelog-master.xml}

# Spring Cloud Stream (Kafka)
spring.cloud.stream.kafka.binder.brokers=localhost:9092
#spring.cloud.stream.kafka.binder.defaultBrokerPort=9092
spring.cloud.stream.kafka.binder.requiredAcks=all
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.replicationFactor=3

queue.topics.novo-pedido.name=novo-pedido-topic
queue.topics.estoque-insuficiente.name=estoque-insuficiente-topic
queue.topics.entrega-iniciada-topic.name=entrega-iniciada-topic
queue.topics.entrega-concluida.name=entrega-concluida-topic

queue.topics.novo-pedido.group=pedido-service-group-novo-pedido
queue.topics.estoque-insuficiente.group=pedido-service-group-estoque-insuficiente
queue.topics.entrega-iniciada-topic.group=pedido-service-group-entrega-iniciada
queue.topics.entrega-concluida.group=pedido-service-group-entrega-concluida


# Producer novo-pedido (Supplier)
spring.cloud.stream.function.definition=novoPedidoStreamDispatcher;

spring.cloud.stream.bindings.novoPedidoStreamDispatcher-out-0.destination=${queue.topics.novo-pedido.name}
spring.cloud.stream.bindings.novoPedidoStreamDispatcher-out-0.group=${queue.topics.novo-pedido.group}

# Consumer Configs
spring.cloud.stream.kafka.default.consumer.autoRebalanceEnabled=true
spring.cloud.stream.kafka.default.consumer.startOffset=earliest
spring.cloud.stream.kafka.default.consumer.max.poll.records=10

# estoque-insuficiente-topic (Consumer)
spring.cloud.stream.bindings.estoque-insuficiente-topic-in-0.destination=${queue.topics.estoque-insuficiente.name}
spring.cloud.stream.bindings.estoque-insuficiente-topic-in-0.group=${queue.topics.estoque-insuficiente.group}

# entrega-iniciada-topic (Consumer)
spring.cloud.stream.bindings.entrega-iniciada-topic-in-0.destination=${queue.topics.entrega-iniciada.name}
spring.cloud.stream.bindings.entrega-iniciada-topic-in-0.group=${queue.topics.entrega-iniciada.group}

# entrega-concluida-topic (Consumer)
spring.cloud.stream.bindings.entrega-concluida-topic-in-0.destination=${queue.topics.entrega-concluida.name}
spring.cloud.stream.bindings.entrega-concluida-topic-in-0.group=${queue.topics.entrega-concluida.group}

# The following properties are available for Kafka consumers only and must be prefixed with
#       `spring.cloud.stream.kafka.bindings.<channelName>.consumer`.
# To avoid repetition, Spring Cloud Stream supports setting values for all channels, in the format of
#       `spring.cloud.stream.kafka.default.consumer.<property>=<value>`.















# Kafka do site
# ref: https://github.com/henriquels25/spring-cloud-stream-sample/blob/bbf174b73d7037f60303018148080d0480cc063f/flight-api/src/main/resources/application.yml
#
# spring.cloud.stream.function.definition= planeArrivedProcessor;flightArrivedConsumer ?
#
# cloud.stream:
#    function.definition: planeArrivedProcessor;flightArrivedConsumer
#    kafka:
#      bindings:
#        planeArrivedProcessor-in-0:
#          consumer:
#            enableDlq: true
#            dlqName: plane-arrived-dlq-v1
#        flightArrivedConsumer-in-0:
#          consumer:
#            enableDlq: true
#            dlqName: flight-arrived-dlq-v1
#        planeArrivedProcessor-out-0:
#          producer.configuration:
#            key.serializer: org.apache.kafka.common.serialization.StringSerializer
#    bindings:
#      planeArrivedProcessor-in-0:
#        destination: plane-arrived-v1
#        group: flight-api
#        consumer:
#          retryable-exceptions:
#            com.henriquels25.flightapi.plane.infra.stream.NoFlightFoundException: false
#      planeArrivedProcessor-out-0:
#        destination: flight-arrived-v1
#      flightArrivedConsumer-in-0:
#        destination: flight-arrived-v1
#        group: flight-api
#      flightFinished-out-0:
#        destination: flight-finished-v1