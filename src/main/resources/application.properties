spring.application.name=pedidos-service
spring.profiles.default=dev

server.port=${PEDIDOS_API_PORT:8086}

# Application Info
application.name=@project.name@
application.description=@project.description@
build.version=@project.version@
build.timestamp=@timestamp@
build.timezone=@timezone@

# Errors
server.error.include-stacktrace=never
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.com.postech.gerencie.pedidos=TRACE

# Database
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Liquibase
spring.liquibase.enabled=true
spring.liquibase.change-log=${PEDIDOS_LIQUIBASE_CHANGELOGS_PATH:db/changelog/changelog-master.xml}

# Spring Cloud Stream (Kafka)
spring.cloud.stream.kafka.binder.brokers=${PEDIDOS_BROKER_HOST:localhost}
spring.cloud.stream.kafka.binder.defaultBrokerPort=${PEDIDOS_BROKER_PORT:9092}

spring.cloud.stream.kafka.binder.requiredAcks=all
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.replicationFactor=1

queue.topics.defaultGroup=pedido-service-group

queue.topics.novo-pedido.name=novo-pedido-topic
queue.topics.novo-pedido.group=${queue.topics.defaultGroup}

queue.topics.estoque-insuficiente.name=estoque-insuficiente-topic
queue.topics.estoque-insuficiente.group=${queue.topics.defaultGroup}

queue.topics.entrega-status.name=entrega-status-topic
queue.topics.entrega-status.group=${queue.topics.defaultGroup}

# Producer
spring.cloud.stream.bindings.novoPedidoStreamDispatcher-out-0.destination=${queue.topics.novo-pedido.name}
spring.cloud.stream.bindings.novoPedidoStreamDispatcher-out-0.group=${queue.topics.novo-pedido.group}

# Consumer Configs
spring.cloud.stream.kafka.default.consumer.autoRebalanceEnabled=true
spring.cloud.stream.kafka.default.consumer.startOffset=earliest
spring.cloud.stream.kafka.default.consumer.max.poll.records=10
spring.cloud.stream.function.definition=estoqueInsuficienteStreamListener;atualizacaoPedidoStreamListener
spring.cloud.function.definition=estoqueInsuficienteStreamListener;atualizacaoPedidoStreamListener

spring.cloud.stream.bindings.estoqueInsuficienteStreamListener-in-0.destination=${queue.topics.estoque-insuficiente.name}
spring.cloud.stream.bindings.estoqueInsuficienteStreamListener-in-0.group=${queue.topics.estoque-insuficiente.group}

spring.cloud.stream.bindings.atualizacaoPedidoStreamListener-in-0.destination=${queue.topics.entrega-status.name}
spring.cloud.stream.bindings.atualizacaoPedidoStreamListener-in-0.group=${queue.topics.entrega-status.group}

# Kafka logging
logging.level.org.apache.zookeeper=ERROR
logging.level.org.apache.kafka=ERROR
logging.level.kafka=ERROR
logging.level.kafka.cluster=ERROR
logging.level.kafka.controller=ERROR
logging.level.kafka.coordinator=ERROR
logging.level.kafka.log=ERROR
logging.level.kafka.server=ERROR
logging.level.kafka.zookeeper=ERROR
logging.level.state.change.logger=ERROR